1. bits を指定できるようにするかどうか考える
2. 読み捨て _ とかかな。
3. リファクタリング
4. ByteString を切り離してもいいかもしれない <- ただし lazy ByteString が必要
7. ByteString ではなく Lazy.ByteString を中間として使っているがその正当性を考慮する
6. expression で if ... then ... else ... や \... -> ... や case ... of ... や
	let ... in ... を許すべきかどうか考える
	必要かどうかが問題だ
7. 以下の refactoring
	File.Binary.Quote
	File.Binary.Instances
	File.Binary.Instances.BigEndian
	File.Binary.Instances.LittleEndian
	examples/readPNG.hs
	examples/readBitmap.hs
8. field の値が正しくなかった場合に error を出して終了する仕様を直す
	あるいは error のままにするほうが良いかもしれない
	error のままであったとしても exception を選ぶべきか考える
9. variables で出したものから dictionary を作るという実装だが、
	本当は、すべてに対して Maybe で list を出して、zipWithM でつなげる
	というほうが良さそうだ
10. 上記の実装ならば、Constant と Variable の場合分けを減らすことができそうだ
	ちょっとやってみようかな
11. ちょっと考えかたを変えて、binToField を Writer として、
	[(Name, ExpQ)] をためていくことにしようかな
	そのほうがきれいではある
