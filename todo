1. 読み捨て _ とかかな。
2. ByteString を切り離してもいいかもしれない <- ただし lazy ByteString が必要
3. ByteString ではなく Lazy.ByteString を中間として使っているがその正当性を考慮する
4. expression で if ... then ... else ... や \... -> ... や case ... of ... や
	let ... in ... を許すべきかどうか考える
	必要かどうかが問題だ
5. field の値が正しくなかった場合に error を出して終了する仕様を直す
	あるいは error のままにするほうが良いかもしれない
	error のままであったとしても exception を選ぶべきか考える
6. homepage の作成
7. examples/CRC.hs を理解する
8. examples/PNG.hs で ChunkBody に size 関数を入れるか
9. examples/readPNG はシンプルなままにする -> よりシンプルにしていく
10. examples/png/ 内で将来的に png-file package の File.Binary.PNG として使える
	ものを作っていこうと思う
	今のところ以下の2つをする必要がある
11. png ihdr plte chunks とするだけで chunks をいいように配置してくれるようにする
12. class ChunkBody を作り、そのインスタンスとすることで新しい chunk を登録できる
	ようにしたい
	これは、binary-file の用例としてはあまり見栄えがしないかもしれない
	一度共通の chunk に読み込んでから、そこから変換する形になると思う
	OtherChunk からの変換として使うべきか
13. error "bad value" をもっとわかりやすいエラーメッセージにする
14. [] の argument は (a, Maybe Int) よりも [a] のほうが良いかもしれない
	それよりも (a, Maybe Integer) にしてみようか
	実用的にはそっちのほうが良さそうに思うけど ...
	でも [a] なら genericTake とかを思えば上記の両方を使えるけど
	問題は足りなかったときに error にできないことだ。
	とすると ([a], Bool) の Bool の部分で無限かどうかをチェックするとか。
	あるいはチェックしないという方法もあるが。
	ただ、今のところ現実的に [a] が必要な場面がないので、
	(a, Maybe Integer) のほうにしておこうかな。
	でも、2G のファイルを使うことってあんまないかな。
	今のところは (a, Maybe Int) でいいかもしれない。
